{"version":3,"file":"static/js/387.b236058d.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader/Loader.jsx","service/moviesAPI.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    margin: 10px;\n    padding: 0;\n    list-style: none;\n`\n\nexport const Photo = styled.img`\nwidth: 200px;\nheigth: 255px;\n`\nexport const Item = styled.li`\nmax-width: 200px;\nmargin: 10px;\n`\n\nexport const Name = styled.p`\nmax-width: 200px;\nfont-size: 14px;\ntext-decoration: none;\ncolor: black;\nmargin-bottom: 5px;\n`\nexport const Character = styled.p`\nmax-width: 200px;\nfont-size: 14px;\ntext-decoration: none;\ncolor: black;\nmargin-bottom: 5px;\n`\nexport const Popularity = styled.p`\nmax-width: 200px;\nfont-size: 14px;\ntext-decoration: none;\ncolor: black;\nmargin-bottom: 5px;\n`\n\nexport const Caption = styled.span`\ndisplay: block;\nfont-size: 16px;\ntext-decoration: none;\ncolor: black;\n`\n\n\n","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Loader from \"../Loader/Loader\";\nimport { getCreditsById } from \"../../service/moviesAPI\";\nimport { List, Photo, Item, Name, Character, Popularity, Caption } from './Cast.styled';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\n\n\nconst Cast = ({ state }) => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n    const [status, setStatus] = useState(\"\");\n\nuseEffect(() => {\n    setStatus(\"LOADING\");\n    try { getCreditsById(movieId).then( response => {\n            const movieCast = response.map(({character, name, popularity, profile_path, state}) => {\n                return {\n                    realId: nanoid(),\n                    character: character === \"\" ? \"No information\" : character,\n                    name: name === \"\" ? \"No information\" : name,\n                    popularity: popularity === \"\" ? \"No information\" : popularity,\n                    profile_path: (profile_path === null || profile_path === \"\") ? `https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg` : `https://image.tmdb.org/t/p/original/${profile_path}`\n                }\n            })\n            setCast([...movieCast]);\n            setStatus(\"OK\");\n        })  \n    } catch (error) {\n        setStatus(\"ERROR\");\n    }\n}, [movieId]);\n\nreturn (\n<>\n<h2>Cast</h2>\n    <List>\n        {cast.map((actor) => (\n        <Item key={actor.realId}>\n            <Character><Caption>Character:</Caption>{actor.character}</Character>\n            <Name><Caption>Name:</Caption>{actor.name}</Name>\n            <Popularity><Caption>Popularity:</Caption>{actor.popularity}</Popularity>\n            <Photo src={actor.profile_path} alt=\"actor\"/>\n        </Item>\n        ))}\n    </List>\n    {(cast.length === 0) &&\n        <p>No information about the cast.</p>}\n    {status === \"LOADING\" &&  <Loader />}\n</>\n);\n};\n\nCast.propTypes = {\n    state: PropTypes.object,\n};\n\nexport default Cast;","import { Grid } from 'react-loader-spinner';\n\nconst Loader = () => {\n    return (\n    <Grid\n    height=\"80\"\n    width=\"80\"\n    color=\"#4fa94d\"\n    ariaLabel=\"grid-loading\"\n    radius=\"12.5\"\n    wrapperStyle={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    }}\n    wrapperClass=\"\"\n    visible={true}\n/>\n    )\n};\n\nexport default Loader;","import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3/';\nconst KEY = '48201fa6f91a1e64f8af04954a183bb3';\n\naxios.defaults.baseURL = URL;\n\nexport const getTrends = async (pageNumber) => {\nconst response = await axios(`trending/movie/day`, {\nparams: {\n    page: pageNumber,\n    api_key: KEY,\n},\n});\n\nreturn response.data.results;\n};\n\nexport const getMovieById = async (movieId) => {\nconst response = await axios(`movie/${movieId}`, {\nparams: {\n    query: movieId,\n    api_key: KEY,\n},\n});\n\nreturn response.data;\n};\n\nexport const getMovieByKeyword = async (keyword, pageNumber) => {\n    const response = await axios(`search/movie`, {\n    params: {\n        query: keyword,\n        page: pageNumber,\n        api_key: KEY,\n    },\n    });\n    \n    return response.data;\n    };\n\nexport const getCreditsById = async (movieId) => {\n    const response = await axios(`movie/${movieId}/credits`, {\n    params: {\n        query: movieId,\n        api_key: KEY,\n    },\n    });\n    \n    return response.data.cast;\n    };\n\nexport const getReviewById = async (movieId) => {\n    const response = await axios(`/movie/${movieId}/reviews`, {\n    params: {\n        query: movieId,\n        api_key: KEY,\n    },\n    });\n    \n    return response.data.results;\n    };","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["List","styled","Photo","Item","Name","Character","Popularity","Caption","state","movieId","useParams","useState","cast","setCast","status","setStatus","useEffect","getCreditsById","then","response","movieCast","map","character","name","popularity","profile_path","realId","nanoid","error","actor","src","alt","length","Loader","height","width","color","ariaLabel","radius","wrapperStyle","display","justifyContent","alignItems","wrapperClass","visible","KEY","axios","getTrends","pageNumber","params","page","api_key","data","results","getMovieById","query","getMovieByKeyword","keyword","getReviewById","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}